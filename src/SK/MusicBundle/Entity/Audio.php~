<?php

namespace SK\MusicBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\File;
use Vich\UploaderBundle\Mapping\Annotation as Vich;

/**
 * @ORM\Entity
 * @Vich\Uploadable
 */
class Audio
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * 
     * @Vich\UploadableField(mapping="audio", fileNameProperty="audioName", size="audioSize")
     * 
     * @var File
     */
    private $audioFile;

    /**
     * @ORM\Column(type="string", length=255)
     *
     * @var string
     */
    private $audioName;

    /**
     * @ORM\Column(type="string")
     *
     * @var string
     */
    private $audioSize;

    /**
     * @ORM\Column(type="datetime")
     *
     * @var \DateTime
     */
    private $updatedAt;


    /**
     * @ORM\ManyToOne(targetEntity="SK\MusicBundle\Entity\Song", inversedBy="audios", cascade={"persist"} )
     */
    private $song;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile $audio
     */
    public function setAudioFile(File $audio = null)//: void
    {
        $this->audioFile = $audio;

        if (null !== $audio) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
            $this->audioSize = $audio->getSize();
            // $this->setAudioName = $audio->getName();


        }
    }

    public function getAudioFile()//: File
    {
        return $this->audioFile;
    }

    public function setAudioName($audioName)//: void
    {
        $this->audioName = $audioName;

            var_dump($audioName);
    }

    public function getAudioName()//: string
    {
        return $this->audioName;
    }
    
    public function setAudioSize($audioSize)//: void
    {
        var_dump($audioSize);
        var_dump('azeazeazea');
        $this->audioSize = $audioSize;
    }

    public function getAudioSize()//: int
    {
        return $this->audioSize;
    }
}